---
- name: Ensure Python is installed
  raw: test -e /usr/bin/python || (apt -y update && apt install -y python3)
  changed_when: false

- name: Install necessary packages for PostgreSQL
  apt:
    name:
      - "{{ postgresql_common_package }}"
      - gnupg
      - curl
      - ca-certificates
      - python3-pip
      - acl
    state: present
    update_cache: yes

- name: Run PostgreSQL PGDG script
  shell: "{{ postgresql_repo_path }} -y"
  args:
    creates: /etc/apt/sources.list.d/pgdg.list
  changed_when: false

- name: Create directory for PostgreSQL repository key
  file:
    path: /usr/share/postgresql-common/pgdg
    state: directory
    mode: '0755'
  changed_when: false

- name: Download the PostgreSQL repository signing key
  get_url:
    url: "{{ postgresql_key_url }}"
    dest: "{{ postgresql_key }}"
    mode: '0644'
  changed_when: false

- name: Check if PGDG repository exists
  stat:
    path: "{{ postgresql_sources_list }}"
  register: pgdg_repo

- name: Add PostgreSQL repository to sources list
  shell: |
    echo "deb [signed-by={{ postgresql_key }}] {{ postgresql_repo_url }} $(lsb_release -cs)-pgdg main" > {{ postgresql_sources_list }}
  when: not pgdg_repo.stat.exists
  changed_when: false

- name: Update package list
  apt:
    update_cache: yes

- name: Install PostgreSQL
  apt:
    name: "{{ postgresql_package }}"
    state: present
    force: yes

- name: Install psycopg2-binary using pip
  pip:
    name: psycopg2-binary
    state: present
    executable: /usr/bin/pip3

- name: Copy pg_hba.conf template to PostgreSQL configuration
  template:
    src: templates/pg_hba.conf
    dest: "{{ pg_hba_conf_path }}"
    owner: postgres
    group: postgres
    mode: '0644'
  notify:
    - Restart PostgreSQL service

- name: Start PostgreSQL manually if not running
  shell: |
    pg_ctlcluster {{ postgresql_version }} main start
  args:
    executable: /bin/bash
  register: postgresql_start
  changed_when: "'server starting' in postgresql_start.stdout"
  failed_when: "'already running' not in postgresql_start.stdout and postgresql_start.rc != 0"

- name: Create PostgreSQL database
  become_user: postgres
  postgresql_db:
    name: "{{ postgresql_db_name }}"
  register: db_creation
  changed_when: db_creation.changed

- name: Create PostgreSQL user
  become_user: postgres
  postgresql_user:
    name: "{{ postgresql_user_name }}"
  register: user_creation
  changed_when: user_creation.changed

# Master Node Configuration
- name: Configure master node
  block:
    - name: Configure postgresql.conf for Master
      blockinfile:
        path: "{{ pg_conf_path }}"
        block: |
          listen_addresses = '{{ postgresql_master_listen_addresses }}'
          wal_level = {{ postgresql_master_wal_level }}
          archive_mode = {{ postgresql_master_archive_mode }}
          archive_command = '{{ postgresql_master_archive_command }}'
          max_wal_senders = {{ postgresql_master_max_wal_senders }}
          hot_standby = {{ postgresql_master_hot_standby }}
      changed_when: false

    - name: Restart PostgreSQL service on master
      shell: |
        pg_ctlcluster {{ postgresql_version }} main restart
      args:
        executable: /bin/bash
      register: restart_result
      changed_when: "'server starting' in restart_result.stdout or 'restarted' in restart_result.stdout"
      failed_when: "'stopped' in restart_result.stdout or restart_result.rc != 0"
  when: "'master' in group_names"

# Replica Node Configuration
- name: Configure replica node
  block:
    - name: Stop PostgreSQL service
      shell: |
        pg_ctlcluster {{ postgresql_version }} main stop
      args:
        executable: /bin/bash
      register: replica_stop
      changed_when: "'server stopped' in replica_stop.stdout or 'is not running' in replica_stop.stdout"

    - name: Check if PostgreSQL data directory exists
      stat:
        path: /var/lib/postgresql/{{ postgresql_version }}/main
      register: data_dir_status
      become_user: postgres

    - name: Remove existing PostgreSQL data and create new directory
      shell: |
        rm -rf /var/lib/postgresql/{{ postgresql_version }}/main &&
        mkdir -p /var/lib/postgresql/{{ postgresql_version }}/main &&
        chmod go-rwx /var/lib/postgresql/{{ postgresql_version }}/main
      args:
        executable: /bin/bash
      become_user: postgres
      when: data_dir_status.stat.exists
      changed_when: false

    - name: Check if standby.signal exists
      stat:
        path: /var/lib/postgresql/{{ postgresql_version }}/main/standby.signal
      register: standby_signal_check
      become_user: postgres

    - name: Perform base backup from Master to Replica
      command: >
        pg_basebackup -P -R -X stream -c fast -h {{ master_host }} -U {{ replication_user }} -D /var/lib/postgresql/{{ postgresql_version }}/main
      args:
        creates: /var/lib/postgresql/{{ postgresql_version }}/main/standby.signal
      become_user: postgres
      when: not standby_signal_check.stat.exists
      changed_when: false

    - name: Configure postgresql.conf for Replica
      blockinfile:
        path: "{{ pg_conf_path }}"
        block: |
          listen_addresses = '{{ postgresql_replica_listen_addresses }}'
          wal_level = {{ postgresql_replica_wal_level }}
          archive_mode = {{ postgresql_replica_archive_mode }}
          archive_command = '{{ postgresql_replica_archive_command }}'
          max_wal_senders = {{ postgresql_replica_max_wal_senders }}
          hot_standby = {{ postgresql_replica_hot_standby }}
      changed_when: false

    - name: Start PostgreSQL service for replica
      shell: |
        pg_ctlcluster {{ postgresql_version }} main start
      args:
        executable: /bin/bash
      register: replica_start
      changed_when: "'server starting' in replica_start.stdout"
      failed_when: "'already running' not in replica_start.stdout and replica_start.rc != 0"
  when: "'replica' in group_names"
